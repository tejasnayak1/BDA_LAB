import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class StudentGrades {
    
    // Mapper class
    public static class GradeMapper extends Mapper<LongWritable, Text, Text, IntWritable> {
        private Text studentName = new Text();
        private IntWritable score = new IntWritable();

        @Override
        protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
            String line = value.toString();
            String[] fields = line.split(" ");
            
            if (fields.length == 2) { // Ensure correct input format (name score)
                studentName.set(fields[0]); // Student name
                score.set(Integer.parseInt(fields[1])); // Score
                context.write(studentName, score); // Emit (name, score)
            }
        }
    }

    // Reducer class
    public static class GradeReducer extends Reducer<Text, IntWritable, Text, Text> {
        private Text grade = new Text();

        @Override
        protected void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
            int totalScore = 0;
            int count = 0;
            
            // Sum all scores and count how many scores are there for each student
            for (IntWritable value : values) {
                totalScore += value.get();
                count++;
            }

            // Calculate average score
            int averageScore = totalScore / count;
            
            // Determine grade based on average score
            if (averageScore >= 90) {
                grade.set("A");
            } else if (averageScore >= 80) {
                grade.set("B");
            } else if (averageScore >= 70) {
                grade.set("C");
            } else if (averageScore >= 60) {
                grade.set("D");
            } else {
                grade.set("F");
            }

            // Emit student name and their grade
            context.write(key, grade); 
        }
    }

    // Main driver method
    public static void main(String[] args) throws Exception {
        // Set up the Hadoop job configuration
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Student Grades");
        job.setJarByClass(StudentGrades.class);

        // Set Mapper and Reducer classes
        job.setMapperClass(GradeMapper.class);
        job.setReducerClass(GradeReducer.class);

        // Set output key and value types for the Mapper
        job.setMapOutputKeyClass(Text.class);
        job.setMapOutputValueClass(IntWritable.class);

        // Set output key and value types for the Reducer
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(Text.class);

        // Input and Output paths from command line arguments
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        // Submit the job and wait for completion
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
